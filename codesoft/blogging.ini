; my-blog/
; ├── client/                    .... Frontend React application
; │   ├── src/
; │   │   ├── components/
; │   │   │   ├── Header.js
; │   │   │   ├── BlogList.js
; │   │   │   ├── BlogPost.js
; │   │   │   ├── Login.js
; │   │   │   ├── Register.js
; │   │   │   └── CommentSection.js
; │   │   ├── App.js
; │   │   ├── index.js
; │   ├── public/
; │   │   └── index.html
; │   └── package.json
; ├── server/                    .... Backend Node.js with Express
; │   ├── models/
; │   │   ├── BlogPost.js
; │   │   ├── User.js
; │   │   └── Comment.js
; │   ├── routes/
; │   │   ├── blogRoutes.js
; │   │   ├── authRoutes.js
; │   │   └── commentRoutes.js
; │   ├── controllers/
; │   │   ├── blogController.js
; │   │   ├── authController.js
; │   │   └── commentController.js
; │   ├── middleware/
; │   │   └── authMiddleware.js
; │   ├── server.js
; │   ├── .env
; │   └── package.json
; └── README.md


const mongoose = require('mongoose');

const blogPostSchema = new mongoose.Schema({
  title: String,
  content: String,
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('BlogPost', blogPostSchema);


const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  username: String,
  email: String,
  password: String,
});

// Encrypt password before saving to database
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

// Compare password for login
userSchema.methods.comparePassword = function (password) {
  return bcrypt.compare(password, this.password);
};

module.exports = mongoose.model('User', userSchema);


const mongoose = require('mongoose');

const commentSchema = new mongoose.Schema({
  content: String,
  postId: { type: mongoose.Schema.Types.ObjectId, ref: 'BlogPost' },
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Comment', commentSchema);


const express = require('express');
const router = express.Router();
const blogController = require('../controllers/blogController');

// Get all blog posts
router.get('/', blogController.getAllPosts);

// Get a specific blog post by ID
router.get('/:id', blogController.getPostById);

// Create a new blog post
router.post('/', blogController.createPost);

module.exports = router;


const BlogPost = require('../models/BlogPost');

// Get all blog posts
exports.getAllPosts = async (req, res) => {
  try {
    const posts = await BlogPost.find().populate('author');
    res.json(posts);
  } catch (error) {
    res.status(500).send(error);
  }
};

// Get a single post by ID
exports.getPostById = async (req, res) => {
  try {
    const post = await BlogPost.findById(req.params.id).populate('author');
    res.json(post);
  } catch (error) {
    res.status(500).send(error);
  }
};

// Create a new post
exports.createPost = async (req, res) => {
  const { title, content, author } = req.body;
  const newPost = new BlogPost({ title, content, author });
  try {
    await newPost.save();
    res.status(201).json(newPost);
  } catch (error
